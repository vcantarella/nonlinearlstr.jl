name: CI
on:
  push:
    branches:
      - main
    tags: ['*']
  pull_request:
  workflow_dispatch:
concurrency:
  # Skip intermediate builds: always.
  # Cancel intermediate builds: only if it is a pull request build.
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ startsWith(github.ref, 'refs/pull/') }}

jobs:
  test:
    name: Julia ${{ matrix.version }} - ${{ matrix.os }} - ${{ matrix.arch }} - ${{ github.event_name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60
    permissions: # needed to allow julia-actions/cache to proactively delete old caches that it has created
      actions: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        version:
          - '1.12'  # Latest stable
          - '1.10'  # LTS
          # - '~1.13.0-0'  # Pre-release
        os:
          - ubuntu-latest
          - windows-latest
          - macos-latest
        arch:
          - x64
        include:
          # Test on Apple Silicon
          - version: '1.12'
            os: macos-latest
            arch: aarch64
        exclude:
          # Reduce Windows and macOS pre-release testing
          - os: windows-latest
            version: '1.12'
    steps:
      - uses: actions/checkout@v5
      - name: Install Fortran compiler (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
      - uses: julia-actions/setup-julia@v2
        with:
          version: ${{ matrix.version }}
          arch: ${{ matrix.arch }}
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-runtest@v1
      - uses: julia-actions/julia-processcoverage@v1
      - uses: codecov/codecov-action@v4
        with:
          files: lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      actions: write # needed to allow julia-actions/cache to proactively delete old caches that it has created
      contents: read
      pages: write # needed to deploy docs to GitHub Pages
      id-token: write # needed for pages deployment
    steps:
      - uses: actions/checkout@v5
      - name: Install Fortran compiler (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.12'
      - uses: julia-actions/cache@v2
      - name: Configure doc environment
        shell: julia --project=docs --color=yes {0}
        run: |
          using Pkg
          Pkg.develop(PackageSpec(path=pwd()))
          Pkg.instantiate()
      - uses: julia-actions/julia-buildpkg@v1
      - uses: julia-actions/julia-docdeploy@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Run doctests
        shell: julia --project=docs --color=yes {0}
        run: |
          using Documenter: DocMeta, doctest
          using nonlinearlstr
          DocMeta.setdocmeta!(nonlinearlstr, :DocTestSetup, :(using nonlinearlstr); recursive=true)
          doctest(nonlinearlstr)

  # Code quality checks
  format-check:
    name: Format Check  
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install Fortran compiler (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.12'
      - uses: julia-actions/cache@v2
      - name: Install JuliaFormatter and format
        run: |
          julia -e 'using Pkg; Pkg.add("JuliaFormatter")'
          julia -e 'using JuliaFormatter; format("."; verbose=true) || exit(1)'

  # Check for type piracy and other issues
  aqua:
    name: Aqua Quality Assurance
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - name: Install Fortran compiler (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.12'
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - name: Run Aqua tests
        shell: julia --project=. --color=yes {0}
        run: |
          using Pkg
          Pkg.add("Aqua")
          using Aqua, nonlinearlstr
          Aqua.test_all(nonlinearlstr; ambiguities=false, stale_deps=false)

  # Benchmark tracking (optional)
  benchmark:
    name: Benchmark
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v5
      - name: Install Fortran compiler (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install gcc
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1.12'
      - uses: julia-actions/cache@v2
      - uses: julia-actions/julia-buildpkg@v1
      - name: Run benchmarks
        shell: julia --project=. --color=yes {0}
        run: |
          using Pkg
          Pkg.add(["BenchmarkTools", "PkgBenchmark"])
          using PkgBenchmark
          # Uncomment when you have benchmark suite
          # results = benchmarkpkg(".", BenchmarkConfig(id="PR"))
          # export_markdown(stdout, results)
